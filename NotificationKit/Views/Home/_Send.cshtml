@using NotificationKit.Models

<div class="form-group well">
    <fieldset>
        <legend>PLATFORMS</legend>
        <div class="form-group">
            <div class="row ">
                <div class="col-md-2">
                    <label>Windows<br />(Notification Type)</label>
                </div>
                <div class="col-md-10">


                    <input class="aux-radio" type="radio" name="send_windows" value="0" data-bind="checked: windows" id="windows_off" /> <label for="windows_off">Off</label>



                    <input class="aux-radio" type="radio" name="send_windows" value="@Payloads.Windows.Badge" data-bind="checked: windows" id="windows_badge" /><label for="windows_badge">Badge</label>



                    <input class="aux-radio" type="radio" name="send_windows" value="@Payloads.Windows.Tile" data-bind="checked: windows" id="windows_tile" /> <label for="windows_tile">Tile</label>



                    <input class="aux-radio" type="radio" name="send_windows" value="@Payloads.Windows.Toast" data-bind="checked: windows" id="windows_toast" /> <label for="windows_toast">Toast</label>



                    </ul>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row ">
                <div class="col-md-2">
                    <label>Windows Phone<br />(Notification Type)</label>
                </div>
                <div class="col-md-10">

                    <input class="aux-radio" type="radio" name="send_windowsPhone" value="0" data-bind="checked: windowsPhone" id="windowsphone_off" /><label for="windowsphone_off">Off</label>


                    <input class="aux-radio" type="radio" name="send_windowsPhone" value="@Payloads.WindowsPhone.Tile" data-bind="checked: windowsPhone" id="windowsphone_tile" /><label for="windowsphone_tile">Tile</label>

                    <input class="aux-radio" type="radio" name="send_windowsPhone" value="@Payloads.WindowsPhone.Toast" data-bind="checked: windowsPhone" id="windowsphone_toast" /><label for="windowsphone_toast">Toast</label>

                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    <label>iOS</label>
                </div>
                <div class="col-md-10">

                    <input class="aux-radio" type="radio" name="send_ios" value="0" data-bind="checked: ios" id="ios_off" /><label for="ios_off"> Off</label>

                    <input class="aux-radio" type="radio" name="send_ios" value="@Payloads.Apple.Alert" data-bind="checked: ios" id="ios_on" /><label for="ios_on"> On</label>

                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row ">
                <div class="col-md-2">
                    <label>Android</label>
                </div>
                <div class="col-md-10">

                    <input class="aux-radio" type="radio" name="send_android" value="0" data-bind="checked: android" id="android_off" /><label for="android_off">Off</label>

                    <input class="aux-radio" type="radio" name="send_android" value="@Payloads.Android.Message" data-bind="checked: android" id="android_on" /><label for="android_on">On</label>

                </div>
            </div>
        </div>
    </fieldset>
</div>

<div class="form-group well">
    <fieldset>
        <legend>TAGS</legend>
        <div class="row">
            <div class=" col-xs-2 ">

            </div>
            <div class="col-xs-10 text-center">
                <div class="col-sm-2">
                    <label>Key</label>
                </div>
                <div class="col-sm-4">
                    <label>Values</label>
                </div>
                <div class="col-sm-2">
                    <label>Exclude</label>
                </div>
                <div class="col-md-4"></div>
            </div>

        </div>
        <!-- ko foreach: tags -->
        <div class="row ">
            <div class="col-xs-2 text-center">
                <button style="margin:2px" class="btn btn-warning" data-bind="click: $parent.deleteTag">
                    <span>Delete</span>
                </button>
            </div>
            <div class="col-xs-10" style="vertical-align:bottom">
                <div class="col-sm-2">
                    <input type="text" class="form-control" data-bind="value: key" placeholder="KEY" />
                </div>
                <div class="col-sm-4">
                    <input type="text" class="form-control" data-bind="value: values" placeholder="VALUE" />
                </div>
                <div class="col-sm-2 text-center">
                    <input type="checkbox" class="aux-checkbox"  data-bind="checked: exclude" placeholder="EXCLUDE" />
                </div>
                <div class="col-sm-4">

                </div>
                </div>
            </div>
        <!-- /ko -->


        <div class="row">
            <div class="col-xs-2 text-center">
                <button style="margin:2px" class="btn btn-success" data-bind="click: addTag">
                    <span>Add</span>
                </button>
            </div>
            <div class="col-xs-10"></div>
        </div>
    </fieldset>
</div>

<div class="form-group well">
    <fieldset>
        <legend>MESSAGE</legend>
        <input type="text" class="form-control " data-bind="value: message" placeholder="MESSAGE" />
    </fieldset>
</div>

<div class="form-group form-inline">
    <button class="btn btn-primary " data-bind="click: send">
        <span class="glyphicon glyphicon-send"></span> Send
    </button>
</div>
<hr />
<div class="alert alert-success" role="alert" data-bind="visible: successMessage(), text: successMessage"></div>
<div class="alert alert-danger" role="alert" data-bind="visible: errorMessage(), text: errorMessage"></div>
<br />
<br />
<div class="form-group">
    <fieldset>
        <legend>RESULTS</legend>

        <div class="">
            <h3>
                <label class="control-label">Records: <span data-bind="text: log().length"></span></label></h3>

            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Message</th>
                        <th>TagExpression</th>
                        <th>Success</th>
                        <th>Failure</th>
                        <th>CreatedOn</th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: log.currentPageData">
                    <tr>
                        <td data-bind="text: Id"></td>
                        <td data-bind="text: Message"></td>
                        <td data-bind="text: TagExpression"></td>
                        <td data-bind="text: Success"></td>
                        <td data-bind="text: Failure"></td>
                        <td data-bind="text: CreatedOn"></td>
                    </tr>
                </tbody>
            </table>

                <div class="text-center">
                    <ul class="pagination">
                        <li><a href="#" data-bind="click: log.movePrev">&laquo;</a></li>
                        <!-- ko foreach: log.pageNumbers -->
                        <li><a href="#" data-bind="text: $data, click: $parent.log.movePage.bind($data)"></a></li>
                        <!-- /ko -->
                        <li><a href="#" data-bind="click: log.moveNext">&raquo;</a></li>
                    </ul>
                </div>
</div>
    </fieldset>
</div>
<script>
    // Send タブの ViewModel を作成
    var SendViewModel = function () {
        var self = this;

        var _successMessage = ko.observable();
        var _errorMessage = ko.observable();

        self.successMessage = ko.computed({
            read: _successMessage,
            write: function (newValue) {
                _successMessage(newValue);
                _errorMessage(null);
            }
        });
        self.errorMessage = ko.computed({
            read: _errorMessage,
            write: function (newValue) {
                _errorMessage(newValue);
                _successMessage(null);
            }
        });

        self.windows = ko.observable("0");
        self.windowsPhone = ko.observable("0");
        self.ios = ko.observable("0");
        self.android = ko.observable("0");

        self.message = ko.observable();

        self.tags = ko.observableArray();
        self.tagExpression = ko.computed(function () {
            var expressions = [];

            $.each(self.tags(), function () {
                var key = this.key();
                var values = this.values().split(',');

                var subExpressions = [];

                $.each(values, function () {
                    subExpressions.push(key + ":" + this);
                });

                expressions.push((this.exclude() ? "!" : "") + "(" + subExpressions.join(" || ") + ")");
            });

            return expressions.join(" && ");
        });

        self.log = ko.observableArray().extend({ paging: 20 });

        self.send = function () {
            $.ajax({
                type: "POST",
                url: "/api/send",
                data: {
                    message: self.message(),
                    tagExpression: self.tagExpression(),
                    windows: self.windows(),
                    windowsPhone: self.windowsPhone(),
                    apple: self.ios(),
                    android: self.android()
                }
            }).done(function () {
                self.message("");

                self.refresh();

                self.successMessage("send success");
            }).fail(function (xhr) {
                var response = JSON.parse(xhr.responseText);

                self.errorMessage(response.ExceptionMessage || response.Message);
            });
        };

        self.addTag = function () {
            self.tags.push({
                key: ko.observable(""),
                values: ko.observable(""),
                exclude: ko.observable(false)
            });
        };

        self.deleteTag = function (data) {
            self.tags.remove(data);
        };

        self.refresh = function () {
            $.ajax({
                type: "GET",
                url: "/api/send"
            }).done(function (result) {
                self.log(result);
            }).fail(function () {
                self.errorMessage("error");
            });
        };

        // 送信ログを非同期で取得
        self.refresh();
    };
</script>
